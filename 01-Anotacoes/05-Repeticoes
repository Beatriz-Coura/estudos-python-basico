### **O que √© for e while?**

As estruturas de repeti√ß√£o **`for`** e **`while`** permitem executar um bloco de c√≥digo v√°rias vezes, com base em uma condi√ß√£o ou em um conjunto de valores.

---

### **for (La√ßo Contado)**

O **`for`** √© usado para percorrer sequ√™ncias como **listas, strings, dicion√°rios, ranges, etc.**

üîπ**Exemplo com `range()`**

```python
for i in range(5):
    print(i)

```

**Sa√≠da:**

```
0
1
2
3
4

```

‚úî `range(n)` gera n√∫meros de **0 at√© `n-1`**.

---

### **Especificando In√≠cio, Fim e Passo**

```python
for i in range(1, 10, 2):  # In√≠cio=1, Fim=9, Passo=2
    print(i)

```

**Sa√≠da:**

```
1
3
5
7
9

```

‚úî `range(in√≠cio, fim, passo)` define um **intervalo customizado**.

---

### **Percorrendo Listas**

```python
frutas = ["Ma√ß√£", "Banana", "Uva"]
for fruta in frutas:
    print(fruta)

```

**Sa√≠da:**

```
Ma√ß√£
Banana
Uva

```

‚úî O **`for` percorre diretamente** os elementos da lista.

---

### **Usando `enumerate()` para √çndice e Valor**

```python
frutas = ["Ma√ß√£", "Banana", "Uva"]
for i, fruta in enumerate(frutas):
    print(f"√çndice {i}: {fruta}")

```

**Sa√≠da:**

```
√çndice 0: Ma√ß√£
√çndice 1: Banana
√çndice 2: Uva

```

‚úî **`enumerate()`** retorna o **√≠ndice e o valor** ao mesmo tempo.

---

### **Percorrendo Strings**

```python
for letra in "Python":
    print(letra)

```

**Sa√≠da:**

```
P
y
t
h
o
n

```

‚úî Strings podem ser percorridas **caractere por caractere**.

---

### **Percorrendo Dicion√°rios**

```python
aluno = {"nome": "Ana", "idade": 20, "curso": "TI"}
for chave, valor in aluno.items():
    print(f"{chave}: {valor}")

```

**Sa√≠da:**

```
nome: Ana
idade: 20
curso: TI

```

‚úî **`items()`** retorna **chave e valor** do dicion√°rio.

---

### **while (La√ßo Condicional)**

O **`while`** executa um bloco de c√≥digo **enquanto uma condi√ß√£o for verdadeira**.

### üìç **Exemplo Simples**

```python
contador = 0
while contador < 5:
    print(contador)
    contador += 1  # Incremento

```

**Sa√≠da:**

```
0
1
2
3
4

```

‚úî O **`while`** verifica a condi√ß√£o antes de cada itera√ß√£o.

‚úî **N√£o esquecer do incremento!** Sen√£o o loop ser√° infinito.

---

### **Loop Infinito (Cuidado!)**

```python
while True:
    resposta = input("Digite 'sair' para parar: ")
    if resposta == "sair":
        break

```

‚úî `while True` cria um **loop infinito**, interrompido com `break`.

---

### **`while` com `else`**

```python
x = 0
while x < 3:
    print(x)
    x += 1
else:
    print("Loop finalizado")

```

**Sa√≠da:**

```
0
1
2
Loop finalizado

```

‚úî O bloco **`else`** √© executado quando o `while` termina normalmente.

---

## **break e continue**

### **`break`: Interrompe o Loop**

```python
for num in range(10):
    if num == 5:
        break  # Para a execu√ß√£o do loop
    print(num)

```

**Sa√≠da:**

```
0
1
2
3
4

```

---

### **`continue`: Pula a Itera√ß√£o Atual**

```python
for num in range(5):
    if num == 2:
        continue  # Pula o n√∫mero 2
    print(num)

```

**Sa√≠da:**

```
0
1
3
4

```

---

## **Diferen√ßas entre for e while**

| **Crit√©rio** | **for**                                       | **while**                                              |
| ------------ | --------------------------------------------- | ------------------------------------------------------ |
| Uso comum    | Percorrer elementos de uma sequ√™ncia          | Repeti√ß√£o baseada em uma condi√ß√£o                      |
| Controle     | Itera√ß√£o autom√°tica (range, listas, etc.)     | Controle manual da condi√ß√£o                            |
| Quando usar? | Quando o n√∫mero de repeti√ß√µes √© **conhecido** | Quando a repeti√ß√£o depende de **uma condi√ß√£o externa** |

---

## **Resumo Final**

‚úî **`for`** √© ideal para percorrer **listas, strings, dicion√°rios, ranges**.

‚úî **`while`** √© usado quando **n√£o sabemos o n√∫mero exato de repeti√ß√µes**.

‚úî **`break`** interrompe o loop imediatamente.

‚úî **`continue`** pula a itera√ß√£o atual e continua no pr√≥ximo ciclo.
